module list

import wyvern.option

type Option = option.Option

resource type List
	def append(e:Dyn):Unit
	def find(pred:Dyn -> Boolean):Option

def make():List
	resource type Cell
		var element:Dyn
		var next:Option
		def find(pred:Dyn -> Boolean):Option
	def makeCell(e:Dyn, n:Option):Cell = new
		var element:Dyn = e
		var next:Option = n
		def find(pred:Dyn -> Boolean):Option
			pred(this.element).ifTrue(
				() => option.Some(this.element),
				() => this.next.flatMap((c:Cell) => c.find(pred)))
	val sentinel : Cell = makeCell(0, option.None())
	new
		var first:Cell = sentinel
		var last:Cell = sentinel
		def append(e:Dyn):Unit
			this.last.element = e
			val cell = makeCell(0, option.None())
			this.last.next = option.Some(cell)
			this.last = cell
		def find(pred:Dyn -> Boolean):Option
			this.first.find(pred)
